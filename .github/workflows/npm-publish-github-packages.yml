name: CI

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 20.10.0
      uses: actions/setup-node@v2
      with:
        node-version: 20.10.0
    - name: Install package
      run: cd src/api && npm install
    - name: Backend Test
      env:
        db_username: ${{ secrets.TEST_DB_USER }}
        db_password: ${{ secrets.TEST_DB_PASSWORD }}
      run: cd src/api && npm test
    - name: Frontend Unit Test
      run: cd src/MRBS-frontend && npm install  && npm run test:unit
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3
        - name: Use Node.js 20.10.0
          uses: actions/setup-node@v2
          with:
            node-version: 20.10.0
        - name: Build Frontend
          run: |
            cd src/MRBS-frontend
            npm install
            npm run build
        - name: Login
          run: |
            cd src/
            docker login --username=${{ secrets.DOCKER_USERNAME }}  --password=${{ secrets.DOCKER_PASSWORD }}
        - name: Build and Publish Image
          run: |
            cd src/
            docker build . --tag ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
            docker push ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
  deploy:
        needs: build
        name: deploy image
        runs-on: ubuntu-latest
        steps:
        - name: connect and set env
          run: |
            # ssh vpn is needed only if you can not directly connect to the `SSH_HOST`
            echo "${{ secrets.SSH_VPN_1_PRIVATE_KEY }}" > ssh_vpn_1.pem
            chmod 600 ssh_vpn_1.pem
            ssh -p 21042 -i ssh_vpn_1.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_VPN_1_USER }}@${{ secrets.SSH_VPN_1_HOST }} "echo '${{ secrets.SSH_PRIVATE_KEY }}' > b.pem && chmod 600 b.pem && ssh -i b.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'cd ${{ secrets.WORK_DIR }} && rm .env && echo HOST=${{ vars.Host }} >> .env;echo OAuth_Client_ID=${{ secrets.OAuth_Client_ID }} >> .env;echo OAuth_Client_Secret=${{ secrets.OAuth_Client_Secret }} >> .env;echo Sender_Mail_Account=${{ secrets.SENDER_MAIL_ACCOUNT }} >> .env;echo Sender_Mail_Password=${{ secrets.Sender_Mail_Password }} >> .env'"
        
        - name: connect and pull
          run: |
            # ssh vpn is needed only if you can not directly connect to the `SSH_HOST`
            echo "${{ secrets.SSH_VPN_1_PRIVATE_KEY }}" > ssh_vpn_1.pem
            chmod 600 ssh_vpn_1.pem
            ssh -i ssh_vpn_1.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_VPN_1_USER }}@${{ secrets.SSH_VPN_1_HOST }} "echo '${{ secrets.SSH_PRIVATE_KEY }}' > b.pem && chmod 600 b.pem && ssh -i b.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'HOST=${{ vars.Host }} OAuth_Client_ID=${{ secrets.OAuth_Client_ID }} OAuth_Client_Secret=${{ secrets.OAuth_Client_Secret }} Sender_Mail_Account=${{ secrets.Sender_Mail_Account }} Sender_Mail_Password=${{ secrets.Sender_Mail_Password }} && cd ${{ secrets.WORK_DIR }} && docker compose pull && docker compose up -d && exit'"
        - name: cleanup
          run: rm -rf ~/.ssh
  deploy-k8s:
        needs: build
        name: deploy k8s
        runs-on: ubuntu-latest
        steps:
        - name: install ssh keys
          run: |
            echo "${{ secrets.SSH_PRIVATE_KEY_K8SPOCA }}" > test.pem
            chmod 600 test.pem
            cat test.pem
        - name: connect and pull
          run: ssh -i test.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_K8SPOCA }}@${{ secrets.SSH_HOST_K8SPOCA }} "kubectl rollout restart deployment/deployment-mrbs && exit"
        - name: cleanup
          run: rm -rf ~/.ssh